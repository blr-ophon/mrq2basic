from enum import Enum, auto
from dataclasses import dataclass


class TokenType(Enum):
    """Enumeration of Symbol types"""
    # Symbols
    NUMBER          = auto()
    LPAREN          = auto()
    RPAREN          = auto()
    # Binary Operators
    OP_ADD          = auto()
    OP_SUBTRACT     = auto()
    OP_MULTIPLY     = auto()
    OP_DIVIDE       = auto()
    OP_MODULUS      = auto()
    # Unary Operators
    OP_NEG          = auto()



@dataclass
class Token:
    """Symbols generated by lexer"""
    type: TokenType                 # Symbol inside token
    value: str = ""                 # value (for numbers)
    # For operators
    preced: int = 0
    isOperator: bool = False
    operands_n: int = 0

    def __repr__(self):
        return str(self.value)
#        s = ""
#        if self.value is not None:
#            s += f"({self.type.name}"
#            if self.preced:
#                s += f"_{self.preced}"
#            s += f": {self.value})"
#
#        return s
